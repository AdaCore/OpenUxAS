These instructions explain how to build and run the UxAS waterways example with the 
AutomationRequestValidation service implemented in Ada/SPARK and running in a separate
process. The executable for the demonstration is named "demo" for lack of a better name.

------------  Building 

You'll need a recent GNAT compiler, at least 20190701.

You need to have XMLAda installed. That should happen by default when installing GNAT.

You will need to have generated the LMCP messages in Ada. To do so, invoke a script
found in the root of the demonstration directory, i.e.,

   cd /path/to/OpenUxAS/ada/arv-demo/

   ./generate-lmcp-sources.sh  /path/to/OpenUxAS/mdms/

The argument specifies the locations of the MDMs. As indicated they are part of the
OpenUxAS distribution so can be wherever you have that (if not in the same place the
demo has them). The script will produce a directory tree, rooted at lmcp-src/ and 
located in the demo root dir, containing all the Ada packages implementing the 
messages. There is a GNAT project file generated as well. You can use it to build
Ada messages project:

   cd lmcp-src

   gprbuild -p -P lmcp_generated_messages.gpr 

Note the "-p" switch which will create the initially missing obj/debug subdirectory.

This generated project file defines the same kind of scenario as the demo application
project file, i.e., the "debug" and "release" scenarios. Thus the application and the
message code can be built differently and independently.

Note that the demo application project file references the generated project file.

You need to have the ZMQ library as well as the Ada binding to ZMQ installed.

Note: when building the demo or starting GPS on the project file, you can ignore
the warning about the IDE package in the ZMQ project file:

   /zmq.gpr:33:09: warning: the project attribute "ide".gnatlist doesn't have the same value as in the root project. The value "" will be used

You can disable the warning by editing the zmq.gpr file (it will appear in GPS
when the warning is displayed). Specifically, find the Ide package in the zmq.gpr file
and comment out the entire package, like so:

   --     package Ide is
   --        for gnatlist use project'project_dir & "proj.gnatls";
   --        for Vcs_Kind use "git";
   --     end Ide;

You would only need to do this once, unless you reinstall the ZMQ Ada binding.

Note that the demo can be built for either "release" or "debug" scenarios ("debug"
is the default). There are other scenario variables as well, defined in separate
project files imported by this one, but that is the primary scenario you should
manipulate.

Therefore, first go to where the demo is located:

   cd /path/to/OpenUxAS/ada/arv-demo/

Then either start GPS:

   GPS -P afrl_ada_dev.gpr

and then build within GPS, or build it on the command line:

   gprbuild -P afrl_ada_dev.gpr -p -XMODE=debug 

or

   gprbuild -P afrl_ada_dev.gpr -p -XMODE=release

or, specifying all:

   gprbuild -P afrl_ada_dev.gpr -XMODE=release -XLIBRARY_TYPE=static -XXMLADA_BUILD=static

but the latter two, LIBRARY_TYPE and XMLADA_BUILD, should almost certainly be
left set to "static" as shown.

If you build in "debug" mode the compiler warnings are enabled. You can ignore warnings for the
code generated by lmcpgen.

You can also ignore warnings in the hand-written Ada/SPARK code under the "src/" directory.
Warnings are generated in that code via pragma Compile_Time_Warning to highlight places where
the current implementation is incomplete.

----------- Demo Configuration and Setup ------------------

You must have a built OpenUxAS. Note that the script for installing the OpenUxAS
dependencies (for the sake of a subsequent build) will also download OpenAMASE and LmcpGen.
This version of LmcpGen is different from the one that has Ada support (located in the Ada
demo directory).

Start in /path/to/OpenUxAS/ada/arv-demo/

Make sure the entity Id for the Ada demo program is the same as used by the UxAS waterway example. 
To do so, check the entityId in the waterway example's xml config file 
(OpenUxAS/examples/02_Example_WaterwaySearch/cfg_WaterwaySearch.xml) and set the same value in
the demo's config.xml file. See the fragment of that file below.

Make sure to disable (comment-out) two entries in the waterway example's xml config file
(cfg_WaterwaySearch.xml):

	Test_SimulationTime
	AutomationRequestValidatorService

That is, it should look like so:

<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<UxAS FormatVersion="1.0" EntityID="200"  EntityType="Aircraft">
    <Bridge Type="LmcpObjectNetworkTcpBridge" TcpAddress="tcp://127.0.0.1:5555" Server="FALSE">
        <SubscribeToMessage MessageType="afrl.cmasi.MissionCommand" />
        <SubscribeToMessage MessageType="afrl.cmasi.LineSearchTask" />
        <SubscribeToMessage MessageType="afrl.cmasi.VehicleActionCommand" />
    </Bridge>

    <!--Service Type="Test_SimulationTime"/-->
    <Service Type="TaskManagerService"/>
    <!--Service Type="AutomationRequestValidatorService"/-->
...

[Note: commenting-out the Test_SimulationTime service seems optional.]


------  Running the Demo ------------------------

With the above setup done (exactly once), open three terminals. In one, start the
demo on the command line:

	cd /path/to/OpenUxAS/ada/arv-demo/

then invoke the demo. There are no arguments:

	./demo

In the second, run the OpenAMASE script:
 
   cd /path/to/OpenUxAS/examples/02_Example_WaterwaySearch

	./runAMASE_WaterwaySearch.sh

that will bring up a window running AMASE. Press the "run" button (just a button with an icon).
You will see two UAVs loitering.

In the third window, run the OpenUxAS script:

   cd /path/to/OpenUxAS/examples/02_Example_WaterwaySearch

	./runUxAS_WaterwaySearch.sh

You will see one of the UAVs start following a waterway depicted in green.

In the terminal running the demo, you should see indications of the messages received and 
sent by our validator service.

----------  Viewing Messages  --------------------------

Note that you can use a SQL viewer utility to see what messages were sent. Those messages are
kept in a SQL database located in a subdirectory of the UxAS example directory. Specifically,
look in the SavedMessages directory that is itself under "RUNDIR_WaterwaySearch/datawork/" eg:

   /path/to/OpenUxAS/examples/02_Example_WaterwaySearch/RUNDIR_WaterwaySearch/datawork/SavedMessages

Look for a "db3" file.

A good, free utility for this is sqlitebrowser. Invoke it on the command line for the database file.
The database file name will vary. For example:

   sqlitebrowser messageLog_1_1554319374668.db3 

That will open a GUI.  

Under the "Tables (1)" entry you will see a "msg" subentry. Click on that.
Next, select the "Browse Data" tab above. Expand the "descriptor" field to see the 
individual kinds of messages sent. Look for those with a "serviceId" of 1000 because
those are from the Ada/SPARK version of the validator service. If you click in the "xml"
field you can see the content of a given message.

